<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Brayden's Blog</title><link>/</link><description>Recent content on Brayden's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Where to start</title><link>/posts/getting_started/</link><pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate><guid>/posts/getting_started/</guid><description>&lt;img src="/images/Getting_started.jpg" alt="Featured image of post Where to start" />&lt;blockquote>
&lt;p>Learn something new everyday and share something now and then&lt;/p>
&lt;/blockquote>
&lt;h2 id="some-useful-tutorial">Some useful tutorial&lt;/h2>
&lt;p>This section serves at providing a start point for newbees. We need a fundamental understanding of some general concepts, an overview of the big picture, most frequently used tools, services, etc.&lt;/p>
&lt;h3 id="linux-basics">Linux basics&lt;/h3>
&lt;p>One of the most comprehensive knowledge base about linux operating system and various of linux tools, softwares, services, I found so far, is the redhat documentation. And it&amp;rsquo;s free - no subscriptions required.&lt;br>
&lt;a class="link" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8" target="_blank" rel="noopener"
>Product Documentation for Red Hat Enterprise Linux 8 &lt;/a>&lt;br>
Note that, it&amp;rsquo;s worth a while to go over the document inventory for RHEL7, RHEL6 as well, as some of the documents could be only found in previous release.&lt;br>
Besides, there&amp;rsquo;re other distros with well orginised docs:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://doc.opensuse.org/" target="_blank" rel="noopener"
>openSUSE Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.fedoraproject.org/en-US/docs/" target="_blank" rel="noopener"
>Fedora User Documentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="virtualization-containerization--cloud-native">Virtualization, Containerization &amp;amp; cloud native&lt;/h3>
&lt;p>This subsection provides some references to the virtualization technologies (Mainly QEMU-kvm here), virtualization management (ovirt and RHV as known as RHEV previously), containers, and container management system (k8s).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.qemu.org/docs/master/" target="_blank" rel="noopener"
>QEMU Documentation&lt;/a>&lt;br>
A comprehensive document about all you need to know about QEMU&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.linux-kvm.org/page/Main_Page" target="_blank" rel="noopener"
>QEMU-KVM website&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://wiki.qemu.org/Category:User_documentation" target="_blank" rel="noopener"
>QEMU User Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://libvirt.org/docs.html" target="_blank" rel="noopener"
>Libvirt Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://virt-manager.org/" target="_blank" rel="noopener"
>Virt-manager website&lt;/a>
Not well documented, while the tools are quite straightforward to use, and you could find quite a lot of blogs, howtos on the Internet, using the keywords - virt-manager, and its supporting tools, like virt-install, virt-clone, virt-viewer, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.4" target="_blank" rel="noopener"
>Red Hat Virtualization&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.ovirt.org/documentation/" target="_blank" rel="noopener"
>Open source virtualization&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.openstack.org/xena/?_ga=2.70887888.1343839674.1640432365-906552595.1638502134" target="_blank" rel="noopener"
>Openstack Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://containerd.io/docs/getting-started/" target="_blank" rel="noopener"
>Containerd Getting Started Guide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.docker.com/" target="_blank" rel="noopener"
>Docker Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="performance-profiling--benchmark">Performance profiling &amp;amp; benchmark&lt;/h3>
&lt;ul>
&lt;li>WIP&lt;/li>
&lt;/ul></description></item><item><title>Route setting in Multihomed Server</title><link>/posts/dual_home_ubuntu/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/dual_home_ubuntu/</guid><description>&lt;img src="/images/Networking.jpg" alt="Featured image of post Route setting in Multihomed Server" />&lt;h1 id="route-setting-in-multihomed-servers">Route setting in Multihomed servers&lt;/h1>
&lt;h2 id="the-issue">The Issue&lt;/h2>
&lt;p>For servers with multiples interfaces connecting to differenct networks, tend to have routing issues if multiple interfaces have default route settings.
For example, I have a server with two NICs, one connect to external network in subnet &lt;code>10.67.126.x/23&lt;/code>, and the other connects to internal network in subnet &lt;code>192.168.8.x/24&lt;/code>.
As the DHCP servers for the two subnets both provide default route, the routing table in my server will results in multiple default routes:&lt;/p>
&lt;pre>&lt;code>default via 192.168.8.8 dev eno2 proto dhcp src 192.168.8.42 metric 100
default via 10.67.126.1 dev eno1 proto dhcp src 10.67.126.153 metric 100
10.67.126.0/23 dev eno1 proto kernel scope link src 10.67.126.153
10.67.126.1 dev eno1 proto dhcp scope link src 10.67.126.153 metric 100
192.168.8.0/24 dev eno2 proto kernel scope link src 192.168.8.42
192.168.8.8 dev eno2 proto dhcp scope link src 192.168.8.42 metric 100
&lt;/code>&lt;/pre>
&lt;p>As a result, most of the services resides on the external network are un-reachable as the traffic would be directed to the wrong network.&lt;/p>
&lt;h2 id="the-solution">The solution&lt;/h2>
&lt;p>As my internal network is quite simply, all the other nodes are in the same subnet, and don&amp;rsquo;t really need a gateway, so a simply fix is to disable the default route for the internal internface.
Following netplan conf is an example:&lt;/p>
&lt;pre>&lt;code>$ cat /etc/netplan/00-installer-config.yaml
# This is the network config written by 'subiquity'
network:
ethernets:
ens260f0:
critical: true
dhcp-identifier: mac
dhcp4: true
ens260f1:
critical: true
dhcp-identifier: mac
dhcp4: true
dhcp4-overrides:
use-routes: false
version: 2
&lt;/code>&lt;/pre>
&lt;p>Then apply the settings&lt;/p>
&lt;pre>&lt;code>$ sudo netplan apply
&lt;/code>&lt;/pre>
&lt;p>Now check the routing table&lt;/p>
&lt;pre>&lt;code>$ sudo ip route
default via 10.67.126.1 dev eno1 proto dhcp src 10.67.126.153 metric 100
10.67.126.0/23 dev eno1 proto kernel scope link src 10.67.126.153 metric 100
10.67.126.1 dev eno1 proto dhcp scope link src 10.67.126.153 metric 100
10.239.27.228 via 10.67.126.1 dev eno1 proto dhcp src 10.67.126.153 metric 100
10.248.2.5 via 10.67.126.1 dev eno1 proto dhcp src 10.67.126.153 metric 100
172.17.6.9 via 10.67.126.1 dev eno1 proto dhcp src 10.67.126.153 metric 100
&lt;/code>&lt;/pre>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a class="link" href="https://askubuntu.com/questions/1042582/how-to-set-default-route-with-netplan-ubuntu-18-04-server-2-nic" target="_blank" rel="noopener"
>Set default route with netplan on Ubuntu&lt;/a>&lt;/p></description></item><item><title>SSH: Fingerprint Mismatch for Dual-boot Servers</title><link>/posts/fingerprints_for_dual_boot_system/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/fingerprints_for_dual_boot_system/</guid><description>&lt;img src="/images/man-in-the-middle.png" alt="Featured image of post SSH: Fingerprint Mismatch for Dual-boot Servers" />&lt;h1 id="ssh-fingerprint-mismatch-for-dual-boot-servers">SSH: Fingerprint Mismatch for Dual-boot Servers&lt;/h1>
&lt;h2 id="the-issue">The issue&lt;/h2>
&lt;p>For server with multiple operating systems installed, ssh tends to fail with the fingerprints check:&lt;/p>
&lt;pre>&lt;code>$ ssh 10.67.126.129
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:I4+yk7+wa9rETt+jKFZ2tEvmSecoXRsDYQc1G/f2exA.
Please contact your system administrator.
Add correct host key in /root/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /root/.ssh/known_hosts:91
ECDSA host key for 10.67.126.129 has changed and you have requested strict checking.
Host key verification failed.
&lt;/code>&lt;/pre>
&lt;p>One workaround would be remove the existing key in .ssh/known_hosts and then accept the new fingerprint.&lt;br>
However, once you switch the server to another operation system, you will repeat the workaround again.&lt;br>
There are a few solutions or kind of workarounds are available, depends on context of the usage.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>If we are within a private development env and no strict security/access control required, then all the options listed here could be used. Otherwise the option - create dedeciated host profile at client side is recommendated.&lt;/p>
&lt;h3 id="bypass-the-local-known_host-file">Bypass the local known_host file&lt;/h3>
&lt;pre>&lt;code>$ ssh -o UserKnownHostsFile=/dev/null 10.67.126.129 -i .ssh/id_rsa
The authenticity of host '10.67.126.129 (10.67.126.129)' can't be established.
ECDSA key fingerprint is SHA256:I4+yk7+wa9rETt+jKFZ2tEvmSecoXRsDYQc1G/f2exA.
ECDSA key fingerprint is MD5:46:22:d8:01:02:dd:10:10:ec:17:28:21:f7:97:22:f0.
Are you sure you want to continue connecting (yes/no)?
&lt;/code>&lt;/pre>
&lt;p>Note that, with this method, you have to type &lt;code>yes&lt;/code> to accept the fingerprint everytime, and enter the password if ssh key is not deployed.&lt;br>
Or another option if passwordless enabled (ssh key is deployed) &lt;code>-o StrictHostKeyChecking=no&lt;/code> as:&lt;/p>
&lt;pre>&lt;code>$ ssh -o StrictHostKeyChecking=no 10.67.126.129
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:I4+yk7+wa9rETt+jKFZ2tEvmSecoXRsDYQc1G/f2exA.
Please contact your system administrator.
Add correct host key in /root/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /root/.ssh/known_hosts:91
Password authentication is disabled to avoid man-in-the-middle attacks.
Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.
Activate the web console with: systemctl enable --now cockpit.socket
Last login: Sat Jan 1 22:34:40 2022 from 10.67.126.101
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>Note that, if passwordless is not enabled, &lt;code>-o StrictHostKeyChecking=no&lt;/code> doesn&amp;rsquo;t work - it still complains the fingerprint and prohabits the login with password or keyboard interaction to mitigate the &amp;ldquo;man-in-the-middle&amp;rdquo; attacks.&lt;/p>
&lt;/blockquote>
&lt;h3 id="fake-single-server">Fake Single Server&lt;/h3>
&lt;p>Another workaround would be copy one of the identity file from one OS to the other, so the two OS appears the same to fake the client to believe it is connecting the same instance.
The identity files are under &lt;code>/etc/ssh/ssh_host*&lt;/code>, simply copy them to the other operating system.&lt;/p>
&lt;h3 id="dedicated-local-host-profiles">Dedicated Local Host Profiles&lt;/h3>
&lt;p>This the recommended options, create a config file at the client side:&lt;/p>
&lt;pre>&lt;code>$cat config
Host icx129-centos8
Hostname 10.67.126.129
UserKnownHostsFile ~/.ssh/icx129-centos8.known_hosts
Host icx129-ubuntu2204
Hostname 10.67.126.129
UserKnownHostsFile ~/.ssh/icx129-ubuntu2204.known_hosts
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://unix.stackexchange.com/questions/521269/ssh-accept-two-key-fingerprints-for-the-same-server-ip" target="_blank" rel="noopener"
>Dual boot - ssh fingerprints for two OSs instances&lt;/a>&lt;/p></description></item><item><title>Deploy k8s Cluster Using kubespray</title><link>/posts/deploy_k8s_cluster_using_kubespray/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><guid>/posts/deploy_k8s_cluster_using_kubespray/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Nowadays, there&amp;rsquo;re couples of way to deploy a k8s cluster in various of form factors, from experimental cluster with a single node to production deployment with hundreds of servers.&lt;/p>
&lt;p>This memo is a note for deploy a &amp;lsquo;product&amp;rsquo; k8s cluster using kubespray - limited by the resources for the experiment, no dedicated storage nodes provisioned, and the networking is not covered as well.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Node&lt;/th>
&lt;th>Role&lt;/th>
&lt;th>Etcd&lt;/th>
&lt;th>External IP&lt;/th>
&lt;th>Internal IP&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>node-101&lt;/td>
&lt;td>Controller&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>&lt;/td>
&lt;td>192.168.8.101&lt;/td>
&lt;td>ubuntu22.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>node-102&lt;/td>
&lt;td>Controller&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>&lt;/td>
&lt;td>192.168.8.102&lt;/td>
&lt;td>ubuntu22.04&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>node-103&lt;/td>
&lt;td>Controller &amp;amp; worker&lt;/td>
&lt;td>yes&lt;/td>
&lt;td>&lt;/td>
&lt;td>192.168.8.103&lt;/td>
&lt;td>ubuntu22.04&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>3 servers, with reasonable CPU, memory and disk space&lt;/li>
&lt;li>At least 2 Ethernet interfaces per server
&lt;ol>
&lt;li>One interface for Internet access as some packages are downloaded on the fly;&lt;/li>
&lt;li>The other interface used for the cluster management, (as well as pods network in this setup);&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Assume ubuntu 22.04 installed;&lt;/li>
&lt;/ol>
&lt;h2 id="detailed-steps">Detailed Steps&lt;/h2>
&lt;h3 id="disable-swap">Disable swap&lt;/h3>
&lt;p>This is required on every node&lt;/p>
&lt;pre>&lt;code>$ swapoff -a
&lt;/code>&lt;/pre>
&lt;h3 id="enable-passwordless-login-via-ssh">Enable passwordless login via ssh&lt;/h3>
&lt;p>This is to enable the passwordless login to the target nodes, so this is required to run on the deployment server (where we run the kubespray).&lt;/p>
&lt;p>Generate ssh keys by running ssh-keygen, simply press &amp;ldquo;enter&amp;rdquo; on asking the passphrase.&lt;/p>
&lt;pre>&lt;code>$ ssh-keygen
&lt;/code>&lt;/pre>
&lt;p>Copy the ssh key id to target server, enter the password following the prompt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ ssh-copy-id brayden@192.168.8.101
$ ssh-copy-id brayden@192.168.8.102
$ ssh-copy-id brayden@192.168.8.103
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enable-passwordless-sudo">Enable passwordless sudo&lt;/h3>
&lt;p>Add the line in &lt;strong>BOLD&lt;/strong>  as shown below in the %sudo section, for the user used to provision the k8s cluster. This is required on every node.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo vim /etc/sudoers
# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL
brayden ALL=(ALL:ALL) NOPASSWD:ALL
&lt;/code>&lt;/pre>&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">$ sudo apt install python3-pip
$ sudo pip3 install --upgrade pip
$ pip --version
pip 21.3.1 from /home/brayden/.local/lib/python3.9/site-packages/pip &lt;span style="color:#f92672">(&lt;/span>python 3.9&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="download-kubespray">Download kubespray&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/kubernetes-sigs/kubespray.git
$ cd kubespray
$ sudo pip install -r requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-the-cluster-setup">Configure the cluster setup&lt;/h3>
&lt;p>Copy the required configuration files, scripts to a dedicated folder to this cluster, in this example, the new folder is named as k8s-100-cluster, as the controller api server will be available at 192.168.8.100.&lt;/p>
&lt;pre>&lt;code>$ cp -rfp inventory/sampe inventory/k8s-100-cluster
&lt;/code>&lt;/pre>
&lt;p>The major configuration about the cluster is done by the inventory.ini, which consists of four major sections&lt;/p>
&lt;ul>
&lt;li>&lt;strong>all&lt;/strong>&lt;/li>
&lt;li>&lt;strong>kube_control_plane&lt;/strong>&lt;/li>
&lt;li>&lt;strong>etcd&lt;/strong>&lt;/li>
&lt;li>&lt;strong>kube_node&lt;/strong>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ vim inventory/k8s-100-cluster/inventory.ini
# ## Configure 'ip' variable to bind kubernetes services on a
# ## different ip than the default iface
# ## We should set etcd_member_name for etcd cluster. The node that is not a etcd member do not need to set the value, or can set the empty string value.
[all]
**node-101 ansible_host=192.168.8.101   ip=192.168.8.101 etcd_member_name=etcd1
node-102 ansible_host=192.168.8.102   ip=192.168.8.102 etcd_member_name=etcd2
node-103 ansible_host=192.168.8.103   ip=192.168.8.103 etcd_member_name=etcd3**
# ## configure a bastion host if your nodes are not directly reachable
# [bastion]
# bastion ansible_host=x.x.x.x ansible_user=some_user
[kube_control_plane]
**node-101
node-102
node-103**
[etcd]
**node-101
node-102
node-103**
[kube_node]
**node-103**
&lt;/code>&lt;/pre>&lt;p>Another important configuration file we shall touch is &lt;code>inventoryk8s-100-clustergroup_varsallall.yml&lt;/code>.&lt;/p>
&lt;p>Here we disable the internal nginx based proxy, and use external load balanced implemented with haproxy.&lt;/p>
&lt;pre tabindex="0">&lt;code>**apiserver_loadbalancer_domain_name: &amp;quot;lb.npg.intel&amp;quot;**
**loadbalancer_apiserver:**
**addres: 192.168.8.100**
**port: 8443**
**loadbalancer_apiserver_localhost: false**
**#loadbalancer_apiserver_port: 6443**
**#loadbalancer_apiserver_healthcheck_port: 8081**
**upstream_dns_servers:**
**- 8.8.8.8**
**- 8.8.4.4**
# Set the proxy, will be populated to apt source and container runtime proxy conf
**http_proxy: &amp;quot;http://child-prc.intel.com:913&amp;quot;**
**https_proxy: &amp;quot;http://child-prc.intel.com:913&amp;quot;**
&lt;/code>&lt;/pre>&lt;p>inventory/k8s-100-cluster/group_vars/k8s_cluster/k8s-cluster.yml&lt;/p>
&lt;pre tabindex="0">&lt;code>**kube_service_addresses: 192.168.0.0/18**
**kube_pods_subnet: 192.168.64.0/18**
**container_manager: docker #containerd**
**kubelet_deployment_type: host**
&lt;/code>&lt;/pre>&lt;h3 id="required-workaround">Required Workaround&lt;/h3>
&lt;blockquote>
&lt;p>Only required if docker is selected as the container runtime.&lt;/p>
&lt;/blockquote>
&lt;p>At the time this memo is being written, the ubuntu 22.04 is not yet GA, so some of the URLs or versions for the docker packages are not valid, hardcode required to fix the issue.&lt;/p>
&lt;pre tabindex="0">&lt;code>diff --git a/roles/container-engine/docker/vars/ubuntu.yml b/roles/container-engine/docker/vars/ubuntu.yml
index 253dbf17..c0077ebf 100644
--- a/roles/container-engine/docker/vars/ubuntu.yml
+++ b/roles/container-engine/docker/vars/ubuntu.yml
@@ -17,16 +17,16 @@ docker_versioned_pkg:
'latest': docker-ce
'18.09': docker-ce=5:18.09.9~3-0~ubuntu-{{ ansible_distribution_release|lower }}
'19.03': docker-ce=5:19.03.15~3-0~ubuntu-{{ ansible_distribution_release|lower }}
- '20.10': docker-ce=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
- 'stable': docker-ce=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
+ '20.10': docker-ce=5:20.10.12~3-0~ubuntu-focal
+ 'stable': docker-ce=5:20.10.12~3-0~ubuntu-focal
'edge': docker-ce=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
docker_cli_versioned_pkg:
'latest': docker-ce-cli
'18.09': docker-ce-cli=5:18.09.9~3-0~ubuntu-{{ ansible_distribution_release|lower }}
'19.03': docker-ce-cli=5:19.03.15~3-0~ubuntu-{{ ansible_distribution_release|lower }}
- '20.10': docker-ce-cli=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
- 'stable': docker-ce-cli=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
+ '20.10': docker-ce-cli=5:20.10.12~3-0~ubuntu-focal
+ 'stable': docker-ce-cli=5:20.10.12~3-0~ubuntu-focal
'edge': docker-ce-cli=5:20.10.11~3-0~ubuntu-{{ ansible_distribution_release|lower }}
docker_package_info:
@@ -44,5 +44,8 @@ docker_repo_info:
repos:
- &amp;gt;
deb [arch={{ host_architecture }}] {{ docker_ubuntu_repo_base_url }}
- {{ ansible_distribution_release|lower }}
+ focal
stable
diff --git a/roles/kubernetes/node/tasks/main.yml b/roles/kubernetes/node/tasks/main.yml
index a342d940..9118a3e6 100644
--- a/roles/kubernetes/node/tasks/main.yml
+++ b/roles/kubernetes/node/tasks/main.yml
@@ -107,7 +107,7 @@
- name: Modprobe nf_conntrack_ipv4
modprobe:
- name: nf_conntrack_ipv4
+ name: nf_conntrack
state: present
register: modprobe_nf_conntrack_ipv4
ignore_errors: true # noqa ignore-errors
&lt;/code>&lt;/pre>&lt;h4 id="update-the-hosts-file">Update the hosts file&lt;/h4>
&lt;p>you may want to add one line for the virtual ip:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo vim /etc/hosts
192.168.8.100 lb.npg.intel
&lt;/code>&lt;/pre>&lt;h2 id="provision-the-cluster">Provision the Cluster&lt;/h2>
&lt;pre>&lt;code>$ ansible-playbook -i inventory/k8s-100-cluster/inventory.ini --become --user=brayden --become-user=root cluster.yml
&lt;/code>&lt;/pre>
&lt;p>If error occured during the provistion, it&amp;rsquo;s better to reset the cluster, fix the issue, and relaunch the provision.&lt;/p>
&lt;pre>&lt;code>$ ansible-playbook -i inventory/k8s-100-cluster/inventory.ini --become --user=brayden --become-user=root reset.yml
$ ansible-playbook -i inventory/k8s-100-cluster/inventory.ini --become --user=brayden --become-user=root cluster.yml
&lt;/code>&lt;/pre>
&lt;h3 id="kubectl-conf-settings">Kubectl conf settings&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ cd ~
$ mkdir .kube
$ cp /etc/kubernetes/admin.conf .kube/
$ echo &amp;quot;export KUBECONFIG=/home/brayden/.kube/admin.conf&amp;quot;
$ kubectl get pods -n kube-system
NAME READY STATUS RESTARTS AGE
calico-kube-controllers-5788f6558-kkbf4 1/1 Running 0 38h
calico-node-hcdh4 1/1 Running 0 38h
calico-node-xfbcq 1/1 Running 0 38h
calico-node-z7qpt 1/1 Running 0 38h
coredns-8474476ff8-7l69z 1/1 Running 0 38h
coredns-8474476ff8-88 1/1 Running 0 38h
dns-autoscaler-5ffdc7f89d-jqq5m 1/1 Running 0 38h
kube-apiserver-node-101 1/1 Running 1 (38h ago) 39h
kube-apiserver-node-102 1/1 Running 1 (38h ago) 39h
kube-apiserver-node-103 1/1 Running 1 (38h ago) 39h
kube-controller-manager-node-101 1/1 Running 1 39h
kube-controller-manager-node-102 1/1 Running 2 (38h ago) 39h
kube-controller-manager-node-103 1/1 Running 1 39h
kube-proxy-fzlvr 1/1 Running 0 39h
kube-proxy-k9z6g 1/1 Running 0 39h
kube-proxy-wrhd7 1/1 Running 0 39h
kube-scheduler-node-101 1/1 Running 2 (38h ago) 39h
kube-scheduler-node-102 1/1 Running 1 39h
kube-scheduler-node-103 1/1 Running 1 39h
nodelocaldns-285cc 1/1 Running 0 38h
nodelocaldns-2d477 1/1 Running 0 38h
nodelocaldns-cpckx 1/1 Running 0 38h
&lt;/code>&lt;/pre>&lt;h2 id="troubleshootings">Troubleshootings&lt;/h2>
&lt;h3 id="failed-to-download-container-images">Failed to download container images&lt;/h3>
&lt;p>Initially, the container runtime is default to containerd, and kubespray uses nerdctl which is docker compatible tools to pull the container images.&lt;/p>
&lt;p>kubespray populated the proxy setting for apt source and containerd service according to the all.yml. However, nerdctl is not able to pull the container image, and no luck with &amp;ndash;extra-vars to the ansiable-playbook.&lt;/p>
&lt;pre>&lt;code>ansible-playbook -i inventory/k8s-100-cluster/inventory.ini --become --user=brayden cluster.yml --extra-vars &amp;quot;https_proxy=http://child-prc.intel.com:913,http_proxy=http://child-prc.intel.com:913&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>While manually run the nerdctl from command line could pull the images successfully.&lt;/p>
&lt;p>So this memo switch the container runtime to docker, which could pull the images with the proxy settings.&lt;/p>
&lt;h3 id="node-102--node-103-failed-to-join-controller-node-101">Node-102 &amp;amp; Node-103 failed to join controller node-101&lt;/h3>
&lt;p>One of the error message reads:&lt;/p>
&lt;pre>&lt;code>error execution phase preflight: couldn't validate the identity of the API Server: configmaps &amp;quot;cluster-info&amp;quot; is forbidden: User &amp;quot;system:anonymous&amp;quot; cannot get resource &amp;quot;configmaps&amp;quot; in API group &amp;quot;&amp;quot; in the namespace &amp;quot;kube-public&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>No dedicated effort spent to root cause this issue, a few changes made and the node could join the cluster successfully.&lt;/p>
&lt;ul>
&lt;li>Do reset before relaunch the provision procedure. Refer to section &amp;ldquo;Provision the Cluster&amp;rdquo;.&lt;/li>
&lt;li>Clean up the ip routing, name server setting.
&lt;ul>
&lt;li>Configure the Ethernet and nameserver explicitely in /etc/netplan/00-installer-config.yaml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># This is the network config written by 'subiquity'
network:
ethernets:
eno1:
dhcp4: true
dhcp6: false
match:
macaddress: 00:1e:67:e6:14:ad
nameservers:
addresses:
- 10.248.2.5
- 10.239.27.228
eno2:
dhcp4: false
addresses:
- 192.168.8.101/24
match:
macaddress: 00:1e:67:e6:14:ae
* Cleanup the /etc/resolve.conf, remove the local addresses.
* Make sure &amp;quot;sudo apt update&amp;quot; could be executed successfully.
&lt;/code>&lt;/pre>&lt;h3 id="coredns-service-crashedbackoff">coredns service crashedbackoff&lt;/h3>
&lt;p>Server&amp;rsquo;s console will continuous show:&lt;/p>
&lt;pre>&lt;code>[19713.675335] IPVS: rr: UDP 192.168.0.3:53 - no destination available
&lt;/code>&lt;/pre>
&lt;p>coredns is in crashloopBackoff status:&lt;/p>
&lt;pre>&lt;code>kube-system coredns-576cbf47c7-8phwt 0/1 CrashLoopBackOff 8
&lt;/code>&lt;/pre>
&lt;p>And the coredns container&amp;rsquo;s log reads&lt;/p>
&lt;pre>&lt;code>plugin/loop: **Loop** (127.0.0.1:55953 -&amp;gt; :53) **detected for zone &amp;quot;.&amp;quot;**, see https://coredns.io/plugins/loop#troubleshooting. Query: &amp;quot;HINFO 4547991504243258144.3688648895315093531.&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>There are also some logs reads&lt;/p>
&lt;pre>&lt;code>&amp;quot;... 192.168.0.1 connection refused ...&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>This was due to miss-configuration of nameserver, after correct the settings in all.yml, and clean up the /etc/resolv.conf, the issue is fixed.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://computingforgeeks.com/deploy-kubernetes-cluster-debian-with-kubespray/" target="_blank" rel="noopener"
>Install Kubernetes Cluster on Debian 10 with Kubespray | ComputingForGeeks&lt;/a>&lt;br>
&lt;a class="link" href="https://www.youtube.com/watch?v=CJ5G4GpqDy0" target="_blank" rel="noopener"
>Deploying kubernetes using Kubespray - YouTube&lt;/a>&lt;br>
&lt;a class="link" href="https://coredns.io/plugins/loop/#troubleshooting" target="_blank" rel="noopener"
>loop (coredns.io)&lt;/a>&lt;br>
&lt;a class="link" href="https://dev.to/mrturkmen/setup-highly-available-kubernetes-cluster-with-haproxy-2dm8" target="_blank" rel="noopener"
>Setup Highly Available Kubernetes Cluster with HAProxy 🇬🇧 - DEV Community&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository" target="_blank" rel="noopener"
>Install Docker Engine on Ubuntu | Docker Documentation&lt;/a>&lt;br>
&lt;a class="link" href="https://stdworkflow.com/1247/k8s-join-user-system-anonymous-cannot-get-resource-configmaps-in-api-group-in-the-namespace" target="_blank" rel="noopener"
>k8s join User “system:anonymous“ cannot get resource “configmaps“ in API group ““ in the namespace - stdworkflow&lt;/a>&lt;/p></description></item><item><title>High Availability &amp; Load Balancing Setup</title><link>/posts/high_availability-load_balancing_setup/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>/posts/high_availability-load_balancing_setup/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>High availability and Load Balancing are the most important features for online services, especially for services in production.&lt;/p>
&lt;p>This memo will provide a step-by-step guide for how-to setup the load balancing and High availability for an online web services. The web service used here as the experimental setup, is kubernetes api server. You could use a dummy web service hosted by nginx or httpd as well.&lt;/p>
&lt;p>In this experimental setup, three servers are used&lt;/p>
&lt;blockquote>
&lt;p>node-101 192.168.8.101 # K8s master node&lt;br>
node-102 192.168.8.102 # K8s master node&lt;br>
node-103 192.168.8.103 # K8s master node &amp;amp; worker node&lt;/p>
&lt;/blockquote>
&lt;p>First we shall implement a load balancer to serve the incoming access request to the API server using HAproxy, then implement high availability using keepalived for the HAproxy itself so there&amp;rsquo;s no actual single point of failure in this setup. Note that, this guide implemented a active-passive mode high availability.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The procedure is validated on Ubuntu 22.04 daily build 20211128.&lt;/p>
&lt;ol>
&lt;li>Make sure the apt source is configured properly, or you have the required packages and their dependencies offline.&lt;/li>
&lt;li>Packages HAproxy and keepalived&lt;/li>
&lt;/ol>
&lt;h2 id="detailed-steps">Detailed steps&lt;/h2>
&lt;p>We shall deploy the HAproxy and keepalived on the same servers (node-101 &amp;amp; node-102) where the k8s api server resides. Note that it&amp;rsquo;s not neccessary to be on the same servers, and on heavy loaded system, would be better to have dedicated load balancer servers to host HAproxy.&lt;/p>
&lt;h3 id="install-the-required-packages">Install the required packages&lt;/h3>
&lt;p>Execute the following command on both node-101 and node-102&lt;/p>
&lt;pre>&lt;code>sudo apt install haproxy keepalived
&lt;/code>&lt;/pre>
&lt;h3 id="configure-load-balancer">Configure Load Balancer&lt;/h3>
&lt;p>Apply the configuration on both node-101 and node-102&lt;/p>
&lt;pre>&lt;code>sudo vim /etc/haproxy/haproxy.cfg
&lt;/code>&lt;/pre>
&lt;p>Add the frontend and backend sections to the end of the cfg file as shown below:&lt;/p>
&lt;pre>&lt;code>global
log /dev/log local0
log /dev/log local1 notice
chroot /var/lib/haproxy
stats socket /run/haproxy/admin.sock mode 660 level admin expose\-fd listeners
stats timeout 30s
user haproxy
group haproxy
daemon
\# Default SSL material locations
ca\-base /etc/ssl/certs
crt\-base /etc/ssl/private
\# See: https://ssl\-config.mozilla.org/\#server=haproxy&amp;amp;server\-version=2.0.3&amp;amp;config=intermediate
ssl\-default\-bind\-ciphers ECDHE\-ECDSA\-AES128\-GCM\-SHA256:ECDHE\-RSA\-AES128\-GCM\-SHA256:ECDHE\-ECDSA\-AES256\-GCM\-SHA384:ECDHE\-RSA\-AES256\-GCM\-SHA384:ECDHE\-ECDSA\-CHACHA20\-POLY1305:ECDHE\-RSA\-CHACHA20\-POLY1305:DHE\-RSA\-AES128\-GCM\-SHA256:DHE\-RSA\-AES256\-GCM\-SHA384
ssl\-default\-bind\-ciphersuites TLS\_AES\_128\_GCM\_SHA256:TLS\_AES\_256\_GCM\_SHA384:TLS\_CHACHA20\_POLY1305\_SHA256
ssl\-default\-bind\-options ssl\-min\-ver TLSv1.2 no\-tls\-tickets
defaults
log global
mode http
option httplog
option dontlognull
timeout connect 5000
timeout client 50000
timeout server 50000
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http
frontend k8s\-apiserver
bind **192.168.8.100:8443** \#ssl crt /etc/ssl/certs/haproxy.pem
mode tcp
default\_backend kubernetes\-apiserver
\#option forwardfor
backend kubernetes\-apiserver
mode tcp
balance roundrobin
**server node\-101 192.168.8.101:6443** check verify none inter 10000
**server node\-102 192.168.8.102:6443** check verify none inter 10000
**server node\-103 192.168.8.103:6443** check verify none inter 10000
listen stats
bind 192.168.8.100:80
mode http
stats enable
stats uri
&lt;/code>&lt;/pre>
&lt;p>Note that, 192.168.8.100 is the virtual IP which is also known as floating IP, which will be implemented by keepalived in later section. The k8s API server is provisioned and accessible via port 6443 on master nodes, and we expose the API server on &lt;strong>192.168.8.100:8443&lt;/strong>&lt;/p>
&lt;p>Now restart the HAproxy&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart haproxy
&lt;/code>&lt;/pre>
&lt;h3 id="configure-high-availability-for-haproxy">Configure High availability for HAproxy&lt;/h3>
&lt;p>Apply the configuration on both node-101 and node 102&lt;/p>
&lt;pre>&lt;code>sudo vim /etc/keepalived/keepalived.conf
\# Global Settings for notifications
global\_defs {
notification\_email {
\&amp;lt;yourid\&amp;gt;@\&amp;lt;yourdomain\&amp;gt;.com \# Email address for notifications
}
notification\_email\_from \&amp;lt;yourid\&amp;gt;@\&amp;lt;yourdomain\&amp;gt;.com \# The from address for the notifications
smtp_server 127.0.0.1 \# SMTP server address
smtp\_connect\_timeout 15
}
\# Define the script used to check if haproxy is still working
vrrp\_script chk\_haproxy {
script &amp;quot;/usr/bin/killall \-0 haproxy&amp;quot;
interval 2
weight 2
}
\# Configuration for Virtual Interface
vrrp\_instance LB\_VIP {
**interface eno2**
**state MASTER** \# set to MASTER on primary server, node\-101
\# state BACKUP \# set to BACKUP on the secondary server node\-102
**priority 101** \# set to 101 on primary server, node\-101
\# priority 99 \# set to 99 on secondary server, node\-102
\# so by default, node\-101 will be elected as the active proxy server \(load balancer\).
virtual\_router\_id 51
smtp\_alert \# Enable Notifications Via Email
authentication {
auth\_type AH
auth\_pass myP@ssword \# Password for accessing vrrpd. Same on all devices
}
unicast\_src\_ip **192.168.8.101** \# Private IP address of this haproxy server, set to 8.102 for node\-102
unicast\_peer {
**192.168.8.102** \# Private IP address of the peer haproxy proxy server, set to 8.101 for node\-102
}
\# The virtual ip address shared between the two loadbalancers
virtual\_ipaddress {
**192.168.8.100**
}
\# Use the Defined Script to Check whether to initiate a fail over
track\_script {
chk\_haproxy
}
}
&lt;/code>&lt;/pre>
&lt;p>restart the keepalived service&lt;/p>
&lt;pre>&lt;code>sudo systemctl restart keepalived
&lt;/code>&lt;/pre>
&lt;h2 id="completion">Completion&lt;/h2>
&lt;p>If everything works as expected, you now should be able to see the virtual IP@ on eno2 in server node-101:&lt;/p>
&lt;pre>&lt;code>ip addr show eno2
4: eno2: \&amp;lt;BROADCAST,MULTICAST,UP,LOWER\_UP\&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000
link/ether 00:1e:67:e6:14:ae brd ff:ff:ff:ff:ff:ff
altname enp3s0f3
inet 192.168.8.101/24 scope global eno2
valid\_lft forever preferred\_lft forever
inet 192.168.8.100/32 scope global eno2
valid\_lft forever preferred\_lft forever
inet6 fe80::21e:67ff:fee6:14ae/64 scope link
valid\_lft forever preferred\_lft forever
&lt;/code>&lt;/pre>
&lt;p>and try to access the service:&lt;/p>
&lt;pre>&lt;code>nc \-vz 192.168.8.100 8443
Connection to 192.168.8.100 8443 port \[tcp/https\] succeeded\!
&lt;/code>&lt;/pre>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.domstamand.com/adding-haproxy-as-load-balancer-to-the-kubernetes-cluster/" target="_blank" rel="noopener"
>Adding HAProxy as load balancer to the Kubernetes cluster | Dominique St-Amand (domstamand.com)&lt;/a>&lt;br>
&lt;a class="link" href="https://itnext.io/create-a-highly-available-kubernetes-cluster-using-keepalived-and-haproxy-37769d0a65ba" target="_blank" rel="noopener"
>Create a Highly Available Kubernetes Cluster Using Keepalived and HAproxy | by KubeSphere | ITNEXT&lt;/a>&lt;br>
&lt;a class="link" href="https://kifarunix.com/configure-highly-available-haproxy-with-keepalived-on-ubuntu-20-04/" target="_blank" rel="noopener"
>Configure Highly Available HAProxy with Keepalived on Ubuntu 20.04&lt;/a>&lt;br>
&lt;a class="link" href="http://kifarunix.com" target="_blank" rel="noopener"
>kifarunix.com&lt;/a>&lt;br>
&lt;a class="link" href="https://kifarunix.com/install-and-setup-haproxy-on-ubuntu-20-04/#haproxyconfigurationfile" target="_blank" rel="noopener"
>Install and Setup HAProxy on Ubuntu 20.04 - kifarunix.com&lt;/a>&lt;br>
&lt;a class="link" href="https://www.retinadata.com/blog/keeping-ips-alive-without-keepalived/" target="_blank" rel="noopener"
>Keeping IPs alive without keepalived - retinadata&lt;/a>&lt;br>
&lt;a class="link" href="https://access.redhat.com/documentation/en-us/red_hat_cloudforms/4.6/html/high_availability_guide/index" target="_blank" rel="noopener"
>High Availability Guide Red Hat CloudForms 4.6 | Red Hat Customer Portal&lt;/a>&lt;br>
&lt;a class="link" href="https://docs.d2iq.com/mesosphere/dcos/services/kubernetes/2.4.2-1.15.3/operations/exposing-the-kubernetes-api/" target="_blank" rel="noopener"
>Exposing the Kubernetes API - D2iQ Docs&lt;/a>&lt;/p></description></item><item><title>Markdown Syntax Guide</title><link>/posts/markdown-syntax/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/markdown-syntax/</guid><description>&lt;img src="/posts/markdown-syntax/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" />&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h4 id="blockquote-without-attribution">Blockquote without attribution&lt;/h4>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h4 id="blockquote-with-attribution">Blockquote with attribution&lt;/h4>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;!-- raw HTML omitted -->
— &lt;!-- raw HTML omitted -->Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h4 id="code-block-with-backticks">Code block with backticks&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!doctype html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Example HTML5 Document&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Test&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h4>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!doctype html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Example HTML5 Document&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Test&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h4 id="ordered-list">Ordered List&lt;/h4>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-list">Unordered List&lt;/h4>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h4 id="nested-list">Nested list&lt;/h4>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;!-- raw HTML omitted -->GIF&lt;!-- raw HTML omitted --> is a bitmap image format.&lt;/p>
&lt;p>H&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted -->O&lt;/p>
&lt;p>X&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> + Y&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted --> = Z&lt;!-- raw HTML omitted -->n&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Press &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->CTRL&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->ALT&lt;!-- raw HTML omitted -->+&lt;!-- raw HTML omitted -->Delete&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> to end the session.&lt;/p>
&lt;p>Most &lt;!-- raw HTML omitted -->salamanders&lt;!-- raw HTML omitted --> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Rich Content</title><link>/posts/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;hr>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ZJthWmvUzzc"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;style>
.__h_video {
position: relative;
padding-bottom: 56.23%;
height: 0;
overflow: hidden;
width: 100%;
background: #000;
}
.__h_video img {
width: 100%;
height: auto;
color: #000;
}
.__h_video .play {
height: 72px;
width: 72px;
left: 50%;
top: 50%;
margin-left: -36px;
margin-top: -36px;
position: absolute;
cursor: pointer;
}
&lt;/style>
&lt;div class="s_video_simple __h_video">
&lt;a href="https://vimeo.com/4.8912912e&amp;#43;07" rel="noopener" target="_blank">
&lt;img src="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640" srcset="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 1x, https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 2x" alt="Sing Jan Swing - Kinetic Type">
&lt;div class="play">&lt;svg version="1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 61 61">&lt;circle cx="30.5" cy="30.5" r="30.5" opacity=".8" fill="#000">&lt;/circle>&lt;path d="M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z" fill="#fff">&lt;/path>&lt;/svg>&lt;/div>&lt;/a>&lt;/div>
&lt;h2 id="bilibilibi-shortcode">bilibilibi Shortcode&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;aid=498363026"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div></description></item><item><title>Placeholder Text</title><link>/posts/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/placeholder-text/</guid><description>&lt;img src="/posts/placeholder-text/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post Placeholder Text" />&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p>
&lt;p>Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p>
&lt;ol>
&lt;li>Exierant elisi ambit vivere dedere&lt;/li>
&lt;li>Duce pollice&lt;/li>
&lt;li>Eris modo&lt;/li>
&lt;li>Spargitque ferrea quos palude&lt;/li>
&lt;/ol>
&lt;p>Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p>
&lt;ol>
&lt;li>Comas hunc haec pietate fetum procerum dixit&lt;/li>
&lt;li>Post torum vates letum Tiresia&lt;/li>
&lt;li>Flumen querellas&lt;/li>
&lt;li>Arcanaque montibus omnes&lt;/li>
&lt;li>Quidem et&lt;/li>
&lt;/ol>
&lt;h1 id="vagus-elidunt">Vagus elidunt&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon" target="_blank" rel="noopener"
>The Van de Graaf Canon&lt;/a>&lt;/p>
&lt;h2 id="mane-refeci-capiebant-unda-mulcebat">Mane refeci capiebant unda mulcebat&lt;/h2>
&lt;p>Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong>Faces illo pepulere&lt;/strong> tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p>
&lt;p>Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p>
&lt;p>Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong>mitis temploque&lt;/strong> vocatus, inque alis, &lt;em>oculos nomen&lt;/em> non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong>parte&lt;/strong>.&lt;/p></description></item><item><title>Math Typesetting</title><link>/posts/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a class="link" href="https://katex.org/docs/autorender.html" target="_blank" rel="noopener"
>Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">{{&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> or .Params.math .Site.Params.math &lt;span style="color:#f92672">}}&lt;/span>
&lt;span style="color:#f92672">{{&lt;/span> partial &lt;span style="color:#e6db74">&amp;#34;math.html&amp;#34;&lt;/span> . &lt;span style="color:#f92672">}}&lt;/span>
&lt;span style="color:#f92672">{{&lt;/span> end &lt;span style="color:#f92672">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project&amp;rsquo;s configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a class="link" href="https://katex.org/docs/supported.html" target="_blank" rel="noopener"
>Supported TeX Functions&lt;/a>&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>/posts/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/emoji-support/</guid><description>&lt;img src="/posts/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" />&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a class="link" href="https://gohugo.io/functions/emojify/" target="_blank" rel="noopener"
>&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a class="link" href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes" target="_blank" rel="noopener"
>Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site&amp;rsquo;s &lt;a class="link" href="https://gohugo.io/getting-started/configuration/" target="_blank" rel="noopener"
>configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The &lt;a class="link" href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener"
>Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">.emoji {
font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
}&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Creating a New Theme</title><link>/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>/posts/creating-a-new-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p>
&lt;p>We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$ vi foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>The &amp;ldquo;&lt;code>--verbose&lt;/code>&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/theme.toml
author = &amp;quot;michael d henderson&amp;quot;
description = &amp;quot;a minimal working template&amp;quot;
license = &amp;quot;MIT&amp;quot;
name = &amp;quot;zafta&amp;quot;
source_repo = &amp;quot;&amp;quot;
tags = [&amp;quot;tags&amp;quot;, &amp;quot;categories&amp;quot;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;quot;YOUR_NAME_HERE&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseurl = &amp;quot;&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;zafta - totally refreshing&amp;quot;
MetaDataFormat = &amp;quot;toml&amp;quot;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p>
&lt;p>Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page-1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;p>If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo&amp;rsquo;s Watch Option&lt;/h3>
&lt;p>Hugo&amp;rsquo;s &amp;ldquo;&lt;code>--watch&lt;/code>&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;quot;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="live-reload-1">Live Reload&lt;/h4>
&lt;p>Note: If you&amp;rsquo;re running the server with the &lt;code>--watch&lt;/code> option, you&amp;rsquo;ll see different content in the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write('&amp;lt;script src=&amp;quot;http://'
+ (location.host || 'localhost').split(':')[0]
+ ':1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/'
+ 'script&amp;gt;')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3>
&lt;p>&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>That wasn&amp;rsquo;t very nice, was it?&lt;/p>
&lt;p>The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;quot;&amp;quot;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:54:53-05:00&amp;quot;
title = &amp;quot;first&amp;quot;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:57:09-05:00&amp;quot;
title = &amp;quot;second&amp;quot;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;p>We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi content/about.md
+++
title = &amp;quot;about&amp;quot;
description = &amp;quot;about this site&amp;quot;
date = &amp;quot;2014-09-27&amp;quot;
slug = &amp;quot;about time&amp;quot;
+++
## about us
i'm speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/theme/&amp;quot;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/about-time/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/second-post/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/first-post/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write('&amp;lt;script src=&amp;quot;http://'
+ (location.host || 'localhost').split(':')[0]
+ ':1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/'
+ 'script&amp;gt;')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;quot;post&amp;quot;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;quot;page&amp;quot; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
[permalinks]
page = &amp;quot;/:title/&amp;quot;
about = &amp;quot;/:filename/&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code>&lt;/pre>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;quot;post&amp;quot;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;quot;page&amp;quot;) (eq .Type &amp;quot;about&amp;quot;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code>&lt;/pre>&lt;p>Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p>
&lt;p>Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p>
&lt;p>Let&amp;rsquo;s restore the default single template before we forget.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don&amp;rsquo;t Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p></description></item><item><title>(Hu)go Template Primer</title><link>/posts/hugo_template_primer/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/hugo_template_primer/</guid><description>&lt;p>Hugo uses the excellent &lt;a class="link" href="https://golang.org/" target="_blank" rel="noopener"
>Go&lt;/a> &lt;a class="link" href="https://golang.org/pkg/html/template/" target="_blank" rel="noopener"
>html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p>
&lt;p>This document is a brief primer on using Go templates. The &lt;a class="link" href="https://golang.org/pkg/html/template/" target="_blank" rel="noopener"
>Go docs&lt;/a>
provide more details.&lt;/p>
&lt;h2 id="introduction-to-go-templates">Introduction to Go Templates&lt;/h2>
&lt;p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.&lt;/p>
&lt;p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a class="link" href="https://golang.org/pkg/html/template/" target="_blank" rel="noopener"
>Go docs&lt;/a>.&lt;/p>
&lt;h2 id="basic-syntax">Basic Syntax&lt;/h2>
&lt;p>Golang templates are HTML files with the addition of variables and
functions.&lt;/p>
&lt;p>&lt;strong>Go variables and functions are accessible within {{ }}&lt;/strong>&lt;/p>
&lt;p>Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>{{ foo }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parameters are separated using spaces&lt;/strong>&lt;/p>
&lt;p>Calling the add function with input of 1, 2:&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Methods and fields are accessed via dot notation&lt;/strong>&lt;/p>
&lt;p>Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>{{ .Params.bar }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parentheses can be used to group items together&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a class="link" href="/layout/variables" >variables&lt;/a> page.&lt;/p>
&lt;p>A variable is accessed by referencing the variable name.&lt;/p>
&lt;pre>&lt;code>&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Variables can also be defined and referenced.&lt;/p>
&lt;pre>&lt;code>{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code>&lt;/pre>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a class="link" href="/layout/functions" >Hugo template
functions&lt;/a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;h2 id="includes">Includes&lt;/h2>
&lt;p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;p>Go templates provide the most basic iteration and conditional logic.&lt;/p>
&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p>
&lt;p>&lt;strong>Example 1: Using Context&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ range array }}
{{ . }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $element := array}}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring key and value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $index, $element := array}}
{{ $index }}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;p>If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code>end&lt;/code>.&lt;/p>
&lt;p>Go Templates treat the following values as false:&lt;/p>
&lt;ul>
&lt;li>false&lt;/li>
&lt;li>0&lt;/li>
&lt;li>any array, slice, map, or string of length zero&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example 1: If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: If -&amp;gt; Else&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3: And &amp;amp; Or&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 4: With&lt;/strong>&lt;/p>
&lt;p>An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent.&lt;/p>
&lt;p>The first example above could be simplified as:&lt;/p>
&lt;pre>&lt;code>{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 5: If -&amp;gt; Else If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="pipes">Pipes&lt;/h2>
&lt;p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p>
&lt;p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p>
&lt;p>A few simple examples should help convey how to use the pipe.&lt;/p>
&lt;p>&lt;strong>Example 1 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if eq 1 1 }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>is the same as&lt;/p>
&lt;pre>&lt;code>{{ eq 1 1 | if }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p>
&lt;p>&lt;strong>Example 2 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code>&lt;/pre>
&lt;p>Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p>
&lt;p>&lt;strong>Example 3 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Could be rewritten as&lt;/p>
&lt;pre>&lt;code>{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="context-aka-the-dot">Context (aka. the dot)&lt;/h2>
&lt;p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code> {{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p>
&lt;h1 id="hugo-parameters">Hugo Parameters&lt;/h1>
&lt;p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p>
&lt;h2 id="using-content-page-parameters">Using Content (page) Parameters&lt;/h2>
&lt;p>In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a class="link" href="/content/front-matter" >front matter&lt;/a>.&lt;/p>
&lt;p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p>
&lt;p>Here is the example front matter:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
- &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code>&lt;/pre>&lt;p>Here is the corresponding code inside of the template:&lt;/p>
&lt;pre>&lt;code> {{ if not .Params.notoc }}
&amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
{{ .TableOfContents }}
&amp;lt;/div&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="using-site-config-parameters">Using Site (config) Parameters&lt;/h2>
&lt;p>In your top-level configuration file (eg, &lt;code>config.yaml&lt;/code>) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p>
&lt;p>For instance, you might declare:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">params&lt;/span>:
&lt;span style="color:#f92672">CopyrightHTML&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span>
&lt;span style="color:#f92672">TwitterUser&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;spf13&amp;#34;&lt;/span>
&lt;span style="color:#f92672">SidebarRecentLimit&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within a footer layout, you might then declare a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> which is only
provided if the &lt;code>CopyrightHTML&lt;/code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again. This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p>
&lt;pre tabindex="0">&lt;code>{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Getting Started with Hugo</title><link>/posts/getting_started_with_hugo/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/getting_started_with_hugo/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Go to &lt;a class="link" href="https://github.com/spf13/hugo/releases" target="_blank" rel="noopener"
>Hugo releases&lt;/a> and download the
appropriate version for your OS and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at &lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>Install Hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the &lt;a class="link" href="http://github.com/spf13/hugo" target="_blank" rel="noopener"
>Hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p>
&lt;h2 id="step-3-change-the-docs-site">Step 3. Change the docs site&lt;/h2>
&lt;p>Stop the Hugo process by hitting Ctrl+C.&lt;/p>
&lt;p>Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p>
&lt;pre>&lt;code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Open your &lt;a class="link" href="http://vim.spf13.com" target="_blank" rel="noopener"
>favorite editor&lt;/a> and change one of the source
content pages. How about changing this very file to &lt;em>fix the typo&lt;/em>. How about changing this very file to &lt;em>fix the typo&lt;/em>.&lt;/p>
&lt;p>Content files are found in &lt;code>docs/content/&lt;/code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code>docs/content/overview/quickstart.md&lt;/code>.&lt;/p>
&lt;p>Change and save this file.. Notice what happened in your terminal.&lt;/p>
&lt;pre>&lt;code>&amp;gt; Change detected, rebuilding site
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code>&lt;/pre>
&lt;p>Refresh the browser and observe that the typo is now fixed.&lt;/p>
&lt;p>Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p>
&lt;h2 id="step-4-have-fun">Step 4. Have fun&lt;/h2>
&lt;p>The best way to learn something is to play with it.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>/posts/migrate-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ static/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p>
&lt;h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file&lt;/h2>
&lt;p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a class="link" href="/overview/configuration/" >Hugo configuration documentation&lt;/a> for details.&lt;/p>
&lt;h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to &lt;code>_site&lt;/code>&lt;/h2>
&lt;p>The default is for Jekyll to publish to &lt;code>_site&lt;/code> and for Hugo to publish to &lt;code>public&lt;/code>. If, like me, you have &lt;a class="link" href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html" target="_blank" rel="noopener"
>&lt;code>_site&lt;/code> mapped to a git submodule on the &lt;code>gh-pages&lt;/code> branch&lt;/a>, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change your submodule to point to map &lt;code>gh-pages&lt;/code> to public instead of &lt;code>_site&lt;/code> (recommended).&lt;/p>
&lt;pre>&lt;code> git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or, change the Hugo configuration to use &lt;code>_site&lt;/code> instead of &lt;code>public&lt;/code>.&lt;/p>
&lt;pre>&lt;code> {
..
&amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
..
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates&lt;/h2>
&lt;p>That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a class="link" href="http://jekyllrb.com/docs/templates/" target="_blank" rel="noopener"
>Jekyll&amp;rsquo;s template documentation&lt;/a> if you need to refresh your memory on how you built your blog and &lt;a class="link" href="/layout/templates/" >Hugo&amp;rsquo;s template&lt;/a> to learn Hugo&amp;rsquo;s way.&lt;/p>
&lt;p>As a single reference data point, converting my templates for &lt;a class="link" href="http://heyitsalex.net/" target="_blank" rel="noopener"
>heyitsalex.net&lt;/a> took me no more than a few hours.&lt;/p>
&lt;h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes&lt;/h2>
&lt;p>Jekyll has &lt;a class="link" href="http://jekyllrb.com/docs/plugins/" target="_blank" rel="noopener"
>plugins&lt;/a>; Hugo has &lt;a class="link" href="/doc/shortcodes/" >shortcodes&lt;/a>. It&amp;rsquo;s fairly trivial to do a port.&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>As an example, I was using a custom &lt;a class="link" href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb" target="_blank" rel="noopener"
>&lt;code>image_tag&lt;/code>&lt;/a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p>
&lt;p>Jekyll&amp;rsquo;s plugin:&lt;/p>
&lt;pre>&lt;code>module Jekyll
class ImageTag &amp;lt; Liquid::Tag
@url = nil
@caption = nil
@class = nil
@link = nil
// Patterns
IMAGE_URL_WITH_CLASS_AND_CAPTION =
IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
def initialize(tag_name, markup, tokens)
super
if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
@class = $1
@url = $3
@caption = $7
@link = $9
elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
@class = $1
@url = $3
@caption = $7
elsif markup =~ IMAGE_URL_WITH_CAPTION
@url = $1
@caption = $5
elsif markup =~ IMAGE_URL_WITH_CLASS
@class = $1
@url = $3
elsif markup =~ IMAGE_URL
@url = $1
end
end
def render(context)
if @class
source = &amp;quot;&amp;lt;figure class='#{@class}'&amp;gt;&amp;quot;
else
source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
end
if @link
source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
if @link
source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
source
end
end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
&lt;/code>&lt;/pre>
&lt;p>is written as this Hugo shortcode:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
&amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
{{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
{{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
&amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
{{ .Get &amp;quot;title&amp;quot; }}{{ end }}
{{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
{{ .Get &amp;quot;caption&amp;quot; }}
{{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
{{ .Get &amp;quot;attr&amp;quot; }}
{{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
&amp;lt;/p&amp;gt; {{ end }}
&amp;lt;/figcaption&amp;gt;
{{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>I simply changed:&lt;/p>
&lt;pre>&lt;code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code>&lt;/pre>
&lt;p>to this (this example uses a slightly extended version named &lt;code>fig&lt;/code>, different than the built-in &lt;code>figure&lt;/code>):&lt;/p>
&lt;pre>&lt;code>{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code>&lt;/pre>
&lt;p>As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p>
&lt;h2 id="finishing-touches">Finishing touches&lt;/h2>
&lt;h3 id="fix-content">Fix content&lt;/h3>
&lt;p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code>hugo server --watch&lt;/code> is your friend. Test your changes and fix errors as needed.&lt;/p>
&lt;h3 id="clean-up">Clean up&lt;/h3>
&lt;p>You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p>
&lt;h2 id="a-practical-example-in-a-diff">A practical example in a diff&lt;/h2>
&lt;p>&lt;a class="link" href="http://heyitsalex.net/" target="_blank" rel="noopener"
>Hey, it&amp;rsquo;s Alex&lt;/a> was migrated in less than a &lt;em>father-with-kids day&lt;/em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a class="link" href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610" target="_blank" rel="noopener"
>diff&lt;/a>.&lt;/p></description></item></channel></rss>